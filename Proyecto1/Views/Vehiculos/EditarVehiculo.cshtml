@model Vehiculo

@{
    ViewData["title"] = "Editar Vehículo";






   
}

<section class="formulario">
    <h1>@ViewData["title"]</h1>

    <div class="form-container">
        <form id="form_vehiculos">
            <label for="Placa">Placa:</label>
            <input type="text" id="Placa" name="Placa" required value="@Model.Placa" maxlength="20" readonly />

            <label for="Marca">Marca:</label>
            <input type="text" id="Marca" name="Marca" required maxlength="100" value="@Model.Marca" />

            <label for="Modelo">Modelo:</label>
            <input type="text" id="Modelo" name="Modelo" required maxlength="100" value="@Model.Modelo" />

            <label for="Traccion">Tracción:</label>
            <input type="text" id="Traccion" name="Traccion" required maxlength="100" value="@Model.Traccion" />

            <label for="Color">Color:</label>
            <input type="text" id="Color" name="Color" required maxlength="20" value="@Model.Color" />

            <label for="UltimaFechaAtencion">Última fecha de atención:</label>
            <input type="date" id="UltimaFechaAtencion" name="UltimaFechaAtencion" required value="@Model.UltimaFechaAtencion.ToString("yyyy-MM-dd")" />

            <label for="TratamientoEspecialNano">¿Tratamiento especial nano?</label>
            @Html.DropDownListFor(m => m.TratamientoEspecialNano, new List<SelectListItem> {
                        new SelectListItem { Text = "Sí", Value = "true" },
                        new SelectListItem { Text = "No", Value = "false" }
                        })
           
            <button type="submit">Guardar</button>
        </form>
    </div>
</section>



<script>


  const form = document.getElementById("form_vehiculos");
  const elements = form.elements;
  let input_placa = document.getElementById("Placa");
  let  status = true

  const checkType = (type, value) => {
    if (type === "number") return Number(value);
    return value;
  };

 
  form.addEventListener("submit", (e) => {
    e.preventDefault();
    let dict = {};

    for (let i = 0; i < elements.length; i++) {
      if (elements[i].tagName === "INPUT" && elements[i].type !== "hidden") {
        const currentTag = elements[i];
        const currentKey = currentTag.name;
        const currentValueType = currentTag.type;
        const currentValue = currentTag.value;

        dict[currentKey] = checkType(currentValueType, currentValue);
      }
    }

    console.log("Datos del formulario:", dict);
    if(status ==  true){
    fetch('/api/vehiculos', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(dict)
    })
    .then(res => {
      if (res.ok) {
        console.log('Empleado creado con éxito');
        window.location.href = '/Vehiculos/MostrarVehiculos';
      } else {
        return res.json().then(error => {
          console.error('Error desde el servidor:', error);
          alert(error.message || "Hubo un error al crear el empleado");
        });
      }
    })
    .catch(error => {
      console.error('Error de red:', error);
      alert('Error de red o del servidor');
    });


    }
  });
</script>






